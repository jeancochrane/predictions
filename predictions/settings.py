"""
Django settings for example_app project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import ssl
from datetime import datetime

import dj_database_url
from django.templatetags.static import static
import pytz

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Retrieve the secret key from the DJANGO_SECRET_KEY environment variable
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# Set the DJANGO_DEBUG environment variable to False to disable debug mode
DEBUG = False if os.getenv('DJANGO_DEBUG', True) == 'False' else True

# Define DJANGO_ALLOWED_HOSTS as a comma-separated list of valid hosts,
# e.g. localhost,127.0.0.1,.herokuapp.com
allowed_hosts = os.getenv('DJANGO_ALLOWED_HOSTS', [])
ALLOWED_HOSTS = allowed_hosts.split(',') if allowed_hosts else []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'compressor',
    'channels',
    'colorfield',
    'predictions'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'predictions.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates/'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'predictions.wsgi.application'
ASGI_APPLICATION = 'predictions.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {}

DATABASES['default'] = dj_database_url.parse(
    os.getenv('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/database'),
    conn_max_age=600,
    ssl_require=True if os.getenv('POSTGRES_REQUIRE_SSL') else False
)

# Caching
# https://docs.djangoproject.com/en/3.0/topics/cache/

cache_backend = 'dummy.DummyCache' if DEBUG is True else 'db.DatabaseCache'
CACHES = {
    'default': {
        'BACKEND': f'django.core.cache.backends.{cache_backend}',
        'LOCATION': 'site_cache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Login config
LOGIN_REDIRECT_URL = 'home'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

DISPLAY_TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'
STATICFILES_STORAGE = os.getenv(
    'DJANGO_STATICFILES_STORAGE',
    'whitenoise.storage.CompressedManifestStaticFilesStorage'
)
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# Django Compressor configs
COMPRESS_PRECOMPILERS = (
    ('module', 'export NODE_PATH=/app/node_modules && npx browserify {infile} -t [ babelify --presets [ @babel/preset-env ] --plugins [ @babel/plugin-proposal-class-properties ] ] > {outfile}'),
    ('text/jsx', 'export NODE_PATH=/app/node_modules && npx browserify {infile} -t [ babelify --presets [ @babel/preset-env @babel/preset-react ] --plugins [ @babel/plugin-proposal-class-properties ] ] > {outfile}'),
)

COMPRESS_OUTPUT_DIR = 'compressor'

# Enable offline compression in production only
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = not DEBUG

# Make sure Django compressor can generate static paths
COMPRESSOR_OFFLINE_CONTEXT = {'static': static}

# Configure redis
redis_host = {
    'address': os.getenv(
        'REDIS_URL',
        'redis://redis:6379'
    )
}

# Enforce SSL in production
if DEBUG is False:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True

    # Temporary fix for Heroku Redis SSL context
    # (See: https://stackoverflow.com/a/70522571)
    ssl_context = ssl.SSLContext()
    ssl_context.check_hostname = False
    redis_host["ssl"] = ssl_context

# Channels config
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {'hosts': [redis_host]}
    }
}

# Start and end datetimes for the game
# must be in the format %m/%d/%y %H:%M:%S
# e.g. "09/19/18 13:55:26"
START_DATETIME = os.getenv('START_DATETIME')
END_DATETIME = os.getenv('END_DATETIME')


def parse_datetime(dt):
    DATE_FORMAT = '%m/%d/%y %H:%M:%S'
    try:
        return datetime.strptime(dt, DATE_FORMAT)
    except ValueError:
        raise ValueError(
            f'Datetimes must be in the format {DATE_FORMAT}'
        )


def GAME_IS_ACTIVE():
    if START_DATETIME and END_DATETIME:
        start_datetime = parse_datetime(START_DATETIME)
        end_datetime = parse_datetime(END_DATETIME)
        now = datetime.now()
        return now >= start_datetime and now <= end_datetime
    elif START_DATETIME or END_DATETIME:
        raise ValueError(
            'Both START_DATETIME and END_DATETIME must be set if at least one is set'
        )
    else:
        return True


def display_datetime(dt):
    return dt.astimezone(pytz.timezone(DISPLAY_TIME_ZONE)).strftime('%m/%d/%y %-I:%M %p')


def GET_DATE_MESSAGE():
    if GAME_IS_ACTIVE():
        raise ValueError(
            'get_date_message() can only be called when game is not active'
        )

    now = datetime.now()
    start_datetime = parse_datetime(START_DATETIME)
    if now < start_datetime:
        return f'This game will start on {display_datetime(start_datetime)} CST'
    else:
        end_datetime = parse_datetime(END_DATETIME)
        if now > end_datetime:
            return f'This game was archived on {display_datetime(end_datetime)} CST'
        else:
            # This shouldn't happen, but raise a verbose error in case
            raise ValueError(
                'Game is not active, but time appears to be between start and end dates'
            )
